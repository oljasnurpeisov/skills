let courseController=function(a,b){function c(a,b){return{id:a,name:b,order:H.length,lessons:null,itemType:"theme"}}function d(){A.innerHTML="";let b=0,c=0,e=H.sort(function(c,a){return c.order-a.order});e.forEach(function({id:g,name:k,itemType:l,lessons:m,collapsed:t,duration:u,type:v}){let w=document.createElement("div");if(w.className="topic",t&&w.classList.add("collapsed"),"theme"===l){if(w.innerHTML=`<div class="topic__header">
                                    <div class="title">${k}</div>
                                    <div class="duration"></div>
                                    <div class="edit-buttons">
                                        <a href="#" title="${o}" class="btn-icon small btn-icon--ghost icon-chevron-up"> </a>
                                        <a href="#" title="${q}" class="btn-icon small btn-icon--ghost icon-trash-can"> </a>
                                        <a href="#" title="${p}" class="btn-icon small btn-icon--ghost icon-chevron-down"> </a>
                                        <a href="#" title="${r}" class="btn-icon small btn-icon--ghost icon-edit"> </a>
                                        <a href="${`/${n}/my-courses/course/${a}/create-lesson`}" title="${s}" class="btn-icon small icon-plus"> </a>
                                    </div>
                                </div>`,w.querySelector(".icon-trash-can").addEventListener("click",function(a){a.preventDefault(),I=g,$.fancybox.open({src:C,touch:!1})}),w.querySelector(".icon-edit").addEventListener("click",function(a){a.preventDefault(),J=g,z.value=k,$.fancybox.open({src:B,touch:!1})}),m){let e=w.querySelector(".title"),h=w.querySelector(".duration"),k=document.createElement("div"),l=0;w.classList.add("spoiler"),k.className="topic__body";let s=m.sort(function(c,a){return c.order-a.order});s.forEach(function({id:c,name:d,duration:e,type:f}){let h=document.createElement("div");h.className="lesson",h.innerHTML=`<div class="title"><a href="${`/${n}/my-courses/course/${a}/view-lesson-${c}`}" title="${d}">${d} <div class="type">${f}</div></a></div>
                                      <div class="duration">${j(e)}</div>
                                      <div class="edit-buttons">
                                          <div class="united">
                                              <a href="#" title="${o}" class="btn-icon btn-icon--ghost icon-chevron-up"> </a>
                                              <a href="#" title="${q}" class="btn-icon btn-icon--ghost icon-trash-can"> </a>
                                              <a href="#" title="${p}" class="btn-icon btn-icon--ghost icon-chevron-down"> </a>
                                          </div>
                                          <a href="${`/${n}/my-courses/course/${a}/edit-lesson-${c}`}" title="${r}" class="btn-icon btn-icon--ghost icon-edit"> </a>
                                      </div>`,h.querySelector(".icon-chevron-up").addEventListener("click",function(a){a.preventDefault(),i(c,s,-1)}),h.querySelector(".icon-trash-can").addEventListener("click",function(a){a.preventDefault(),K=c,I=g,$.fancybox.open({src:D,touch:!1})}),h.querySelector(".icon-chevron-down").addEventListener("click",function(a){a.preventDefault(),i(c,s,1)}),l+=e,k.append(h),b++}),e.addEventListener("click",function(){w.classList.toggle("collapsed");let a=f(g,H);a.collapsed=!a.collapsed,d()}),h.innerHTML=j(l),c+=l,w.append(k)}}else{w.innerHTML=`<div class="topic__header">
                                    <div class="title"><a href="${`/${n}/my-courses/course/${a}/view-lesson-${g}`}" title="${k}">${k}</a><div class="type">${v}</div></div>
                                    <div class="duration">${j(u)}</div>
                                    <div class="edit-buttons">
                                        <a href="#" title="${o}" class="btn-icon small btn-icon--ghost icon-chevron-up"> </a>
                                        <a href="#" title="${q}" class="btn-icon small btn-icon--ghost icon-trash-can"> </a>
                                        <a href="#" title="${p}" class="btn-icon small btn-icon--ghost icon-chevron-down"> </a>
                                        <a href="${`/${n}/my-courses/course/${a}/edit-lesson-${g}`}" title="${r}" class="btn-icon small btn-icon--ghost icon-edit"> </a>
                                        <span class="btn-icon small icon-plus invisible"> </span>
                                    </div>
                                </div>`,w.querySelector(".icon-trash-can").addEventListener("click",function(a){a.preventDefault(),K=g,$.fancybox.open({src:D,touch:!1})}),c+=u,b++}w.querySelector(".icon-chevron-up").addEventListener("click",function(a){a.preventDefault(),h(g,-1)}),w.querySelector(".icon-chevron-down").addEventListener("click",function(a){a.preventDefault(),h(g,1)}),A.append(w)}),F.innerHTML=b+"",E.innerHTML=j(c)}function e(a,b){let c=document.querySelector(G),d=c.querySelector(".title-primary"),e=c.querySelector(".plain-text");d.innerHTML=a,e.innerHTML=b,$.fancybox.open({src:G,touch:!1})}function f(a,b){return b.find(function(b){return b.id===+a})}function g(a,b){return b.findIndex(function(b){return b.id===+a})}function h(a,b){let c=f(a,H),e=H.find(function(a){return 1==(a.order-c.order)*b});e&&(l(),t.swapItems(c.id,c.itemType,e.id,e.itemType).then(function(){c.order+=b,e.order=c.order-b,d(),m()}).catch(function(a){console.log(a.message)}))}function i(a,b,c){let e=f(a,b),g=b.find(function(a){return 1==(a.order-e.order)*c});g&&(l(),t.swapLessonsOrders(e.id,g.id).then(function(){e.order+=c,g.order=e.order-c,d(),m()}).catch(function(a){console.log(a.message)}))}function j(a){let b=parseInt(a/60),c=k(b),d=k(a%60);return c+":"+d}function k(a){return 1===(a+"").length?"0"+(a+""):a+""}function l(){A.classList.add("loading-default")}function m(){A.classList.remove("loading-default")}const n=window.Laravel.lang,{upText:o,downText:p,deleteText:q,editText:r,addText:s}=b,t=new DataService,u=document.querySelector("#addTopicBtn"),v=document.querySelector("#editTopicBtn"),w=document.querySelector("#removeTopicBtn"),x=document.querySelector("#removeLessonBtn"),y=document.querySelector("#newTopicNameInput"),z=document.querySelector("#editTopicNameInput"),A=document.querySelector("#courseDataContainer"),B="#editTopicModal",C="#removeTopicModal",D="#removeLessonModal",E=document.querySelector("#courseDuration"),F=document.querySelector("#lessonsCount"),G="#modalMsg";let H=[],I=null,J=null,K=null;this.initComponent=function(){u.addEventListener("click",function(b){b.preventDefault();let e=y.value;return e?void(y.parentElement.classList.remove("error"),t.addTopic(a,e).then(function({id:a,name:b}){H.push(c(a,b)),parent.jQuery.fancybox.getInstance().close(),d(),y.value=""}).catch(function(a){console.log(a.message)})):(y.parentElement.classList.add("error"),!1)}),v.addEventListener("click",function(a){a.preventDefault();let b=z.value;return b?void(y.parentElement.classList.remove("error"),t.editTopic(J,b).then(function({msgTitle:a,msgText:c}){parent.jQuery.fancybox.getInstance().close(),setTimeout(function(){e(a,c)},380);let g=f(J,H);g.name=b,d()}).catch(function(a){console.log(a.message)})):(y.parentElement.classList.add("error"),!1)}),w.addEventListener("click",function(a){a.preventDefault(),t.removeTopic(I).then(function({msgTitle:a,msgText:b}){parent.jQuery.fancybox.getInstance().close(),setTimeout(function(){e(a,b)},380);let c=g(I,H);H.splice(c,1);for(let d=c;d<H.length;d++)H[d].order--;d()}).catch(function(a){console.log(a.message)})}),x.addEventListener("click",function(a){a.preventDefault(),t.removeLesson(I,K).then(function({msgTitle:a,msgText:b}){parent.jQuery.fancybox.getInstance().close(),setTimeout(function(){e(a,b)},380);let c=f(I,H).lessons,h=g(K,c);c.splice(h,1);for(let d=h;d<c.length;d++)c[d].order--;d()}).catch(function(a){console.log(a.message)})}),t.getCourseData(a).then(function(a){H=[...a],d()}).catch(function(a){console.log(a.message)})},this.renderData=function(){d()}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
