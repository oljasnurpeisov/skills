let courseController = function (a, b) {
    function c(a, b) {
        return {id: a, name: b, order: F.length, lessons: null}
    }

    function d() {
        y.innerHTML = "";
        let b = 0, c = 0, e = F.sort(function (c, a) {
            return c.order - a.order
        });
        e.forEach(function ({id: g, name: k, order: r, lessons: s, collapsed: t}) {
            let u = document.createElement("div");
            if (u.className = "topic", t && u.classList.add("collapsed"), u.innerHTML = `<div class="topic__header">
                                    <div class="title">${k}</div>
                                    <div class="duration"></div>
                                    <div class="edit-buttons">
                                        <a href="#" title="${m}" class="btn-icon small btn-icon--ghost icon-chevron-up"> </a>
                                        <a href="#" title="${o}" class="btn-icon small btn-icon--ghost icon-trash-can"> </a>
                                        <a href="#" title="${n}" class="btn-icon small btn-icon--ghost icon-chevron-down"> </a>
                                        <a href="#" title="${p}" class="btn-icon small btn-icon--ghost icon-edit"> </a>
                                        <a href="${`/${l}/my-courses/course/${a}/theme-${g}/create-lesson`}" title="${q}" class="btn-icon small icon-plus"> </a>
                                    </div>
                                </div>`, u.querySelector(".icon-chevron-up").addEventListener("click", function (a) {
                a.preventDefault(), h(g, -1)
            }), u.querySelector(".icon-trash-can").addEventListener("click", function (a) {
                a.preventDefault(), G = g, $.fancybox.open({src: A, touch: !1})
            }), u.querySelector(".icon-chevron-down").addEventListener("click", function (a) {
                a.preventDefault(), h(g, 1)
            }), u.querySelector(".icon-edit").addEventListener("click", function (a) {
                a.preventDefault(), H = g, x.value = k, $.fancybox.open({src: z, touch: !1})
            }), s) {
                let e = u.querySelector(".title"), h = u.querySelector(".duration"), k = document.createElement("div"),
                    q = 0;
                u.classList.add("spoiler"), k.className = "topic__body";
                let r = s.sort(function (c, a) {
                    return c.order - a.order
                });
                r.forEach(function ({id: c, name: d, order: e, duration: f, type: h}) {
                    let s = document.createElement("div");
                    s.className = "lesson", s.innerHTML = `<div class="title"><a href="${`/${l}/my-courses/course/${a}/view-lesson-${c}`}" title="${d}">${d} <div class="type">${h}</div></a></div>
                                      <div class="duration">${j(f)}</div>
                                      <div class="edit-buttons">
                                          <div class="united">
                                              <a href="#" title="${m}" class="btn-icon btn-icon--ghost icon-chevron-up"> </a>
                                              <a href="#" title="${o}" class="btn-icon btn-icon--ghost icon-trash-can"> </a>
                                              <a href="#" title="${n}" class="btn-icon btn-icon--ghost icon-chevron-down"> </a>
                                          </div>
                                          <a href="${`/${l}/my-courses/course/${a}/edit-lesson-${c}`}" title="${p}" class="btn-icon btn-icon--ghost icon-edit"> </a>
                                      </div>`, s.querySelector(".icon-chevron-up").addEventListener("click", function (a) {
                        a.preventDefault(), i(g, c, r, -1)
                    }), s.querySelector(".icon-trash-can").addEventListener("click", function (a) {
                        a.preventDefault(), I = c, G = g, $.fancybox.open({src: B, touch: !1})
                    }), s.querySelector(".icon-chevron-down").addEventListener("click", function (a) {
                        a.preventDefault(), i(g, c, r, 1)
                    }), q += f, k.append(s), b++
                }), e.addEventListener("click", function () {
                    u.classList.toggle("collapsed");
                    let a = f(g, F);
                    a.collapsed = !a.collapsed, d()
                }), h.innerHTML = j(q), c += q, u.append(k)
            }
            y.append(u)
        }), D.innerHTML = b, C.innerHTML = j(c)
    }

    function e(a, b) {
        let c = document.querySelector(E), d = c.querySelector(".title-primary"), e = c.querySelector(".plain-text");
        d.innerHTML = a, e.innerHTML = b, $.fancybox.open({src: E, touch: !1})
    }

    function f(a, b) {
        return b.find(function (b) {
            return b.id === +a
        })
    }

    function g(a, b) {
        return b.findIndex(function (b) {
            return b.id === +a
        })
    }

    function h(b, c) {
        let e = f(b, F), g = F.find(function (a) {
            return 1 == (a.order - e.order) * c
        });
        g && r.swapTopicsOrders(a, e.id, g.id).then(function () {
            e.order += c, g.order = e.order - c, d()
        }).catch(function (a) {
            console.log(a.message)
        })
    }

    function i(b, c, e, g) {
        let h = f(c, e), i = e.find(function (a) {
            return 1 == (a.order - h.order) * g
        });
        i && r.swapLessonsOrders(a, b, h.id, i.id).then(function () {
            h.order += g, i.order = h.order - g, d()
        }).catch(function (a) {
            console.log(a.message)
        })
    }

    function j(a) {
        let b = parseInt(a / 60), c = k(b), d = k(a % 60);
        return c + ":" + d
    }

    function k(a) {
        return 1 === (a + "").length ? "0" + (a + "") : a + ""
    }

    const l = window.Laravel.lang, {upText: m, downText: n, deleteText: o, editText: p, addText: q} = b,
        r = new DataService, s = document.querySelector("#addTopicBtn"), t = document.querySelector("#editTopicBtn"),
        u = document.querySelector("#removeTopicBtn"), v = document.querySelector("#removeLessonBtn"),
        w = document.querySelector("#newTopicNameInput"), x = document.querySelector("#editTopicNameInput"),
        y = document.querySelector("#courseDataContainer"), z = "#editTopicModal", A = "#removeTopicModal",
        B = "#removeLessonModal", C = document.querySelector("#courseDuration"),
        D = document.querySelector("#lessonsCount"), E = "#modalMsg";
    let F = [], G = null, H = null, I = null;
    this.initComponent = function () {
        s.addEventListener("click", function (b) {
            b.preventDefault();
            let e = w.value;
            return e ? void (w.parentElement.classList.remove("error"), r.addTopic(a, e).then(function ({id: a, name: b}) {
                F.push(c(a, b)), parent.jQuery.fancybox.getInstance().close(), d(), w.value = ""
            }).catch(function (a) {
                console.log(a.message)
            })) : (w.parentElement.classList.add("error"), !1)
        }), t.addEventListener("click", function (b) {
            b.preventDefault();
            let c = x.value;
            return c ? void (w.parentElement.classList.remove("error"), r.editTopic(a, H, c).then(function ({msgTitle: a, msgText: b}) {
                parent.jQuery.fancybox.getInstance().close(), setTimeout(function () {
                    e(a, b)
                }, 380);
                let g = f(H, F);
                g.name = c, d()
            }).catch(function (a) {
                console.log(a.message)
            })) : (w.parentElement.classList.add("error"), !1)
        }), u.addEventListener("click", function (b) {
            b.preventDefault(), r.removeTopic(a, G).then(function ({msgTitle: a, msgText: b}) {
                parent.jQuery.fancybox.getInstance().close(), setTimeout(function () {
                    e(a, b)
                }, 380);
                let c = g(G, F);
                F.splice(c, 1);
                for (let d = c; d < F.length; d++) F[d].order--;
                d()
            }).catch(function (a) {
                console.log(a.message)
            })
        }), v.addEventListener("click", function (b) {
            b.preventDefault(), r.removeLesson(a, G, I).then(function ({msgTitle: a, msgText: b}) {
                parent.jQuery.fancybox.getInstance().close(), setTimeout(function () {
                    e(a, b)
                }, 380);
                let c = f(G, F).lessons, h = g(I, c);
                c.splice(h, 1);
                for (let d = h; d < c.length; d++) c[d].order--;
                d()
            }).catch(function (a) {
                console.log(a.message)
            })
        }), r.getCourseData(a).then(function (a) {
            F = [...a], d()
        }).catch(function (a) {
            console.log(a.message)
        })
    }, this.renderData = function () {
        d()
    }
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
