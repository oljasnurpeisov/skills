let ajaxSelect=function(a,b,c=!0){this.domainName="/",this.lang=window.Laravel.lang,this.el=a,this.url=this.domainName+this.lang+b,this.multiLang=c};ajaxSelect.prototype={initComponent:function(){function a(a,b,c,d){let e=[];b.forEach(function(a){e.push({value:a.id,text:a["name"+(c?"_"+d:"")]})}),a.addOption(e)}function b(a){let b=[];Object.values(a.options).forEach(a=>{b.push(a.value)}),a.setValue(b)}function c(a,b){a.setTextboxValue(b),a.focus()}let d=this.multiLang,e=this.lang,f=this.url,g=this.el.selectize({plugins:this.el[0].hasAttribute("multiple")?["remove_button"]:null,sortField:[{field:"text",direction:"asc"}],onInitialize:function(){$.ajax({type:"POST",url:f,data:{name:""},success:function(c){h.clearOptions(!0),b(h),a(h,c,d,e)},error:function(a){console.log(a)}})}}),h=g[0].selectize;h.on("type",delay(function(g){$.ajax({type:"POST",url:f,data:{name:g},success:function(f){h.clearOptions(!0),b(h),a(h,f,d,e),c(h,g)},error:function(a){console.log(a)}})},600))}};function delay(a,b){let c=0;return function(){let d=this,e=arguments;clearTimeout(c),c=setTimeout(function(){a.apply(d,e)},b||0)}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
