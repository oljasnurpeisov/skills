const DataService=function(){function a(a){return"theme"===a.item_type?{id:a.id,name:a.name,order:a.order,lessons:0===a.lessons.length?null:a.lessons,collapsed:!1,itemType:a.item_type}:{id:a.id,name:a.name,order:a.order,collapsed:!1,itemType:a.item_type,duration:a.duration,type:a.type}}let b=window.Laravel.lang,c="",d=window.Laravel.csrfToken;this.getCourseData=async function(c){let d=await this.getResource("GET",b+"/getCourseDataTest/"+c,"",!0);return JSON.parse(d.response).map(a)},this.addTopic=async function(a,b){let c=await this.getResource("POST","create-theme","course_id="+a+"&name="+b+"",!0);return console.log(c),{id:parseInt(c.response),name:b}},this.editTopic=async function(a,b){let c=await this.getResource("POST","edit-theme","theme_id="+a+"&theme_name="+b+"",!0),d=JSON.parse(c.response);return{msgTitle:d.title,msgText:d.body}},this.removeTopic=async function(a){let b=await this.getResource("DELETE","delete-theme","theme_id="+a+"",!0),c=JSON.parse(b.response);return{msgTitle:c.title,msgText:c.body}},this.removeLesson=async function(a,b){let c=await this.getResource("DELETE","delete-lesson","lesson_id="+b+"&theme_id="+a+"",!0),d=JSON.parse(c.response);return{msgTitle:d.title,msgText:d.body}},this.swapItems=async function(a,b,c,d){this.getResource("POST","move-item","item_1_id="+a+"&item_1_type="+b+"&item_2_id="+c+"&item_2_type="+d+"",!0)},this.swapLessonsOrders=async function(a,b){this.getResource("POST","move-lesson","lesson_1_id="+a+"&lesson_2_id="+b+"",!0)},this.getResource=async function(a,b,e,f){let g=await new Promise(function(g){let h=new XMLHttpRequest;h.open(a,`${c}/${b}`,f),h.setRequestHeader("Content-type","application/x-www-form-urlencoded"),h.setRequestHeader("X-CSRF-TOKEN",d),h.onload=function(){g(h)},h.onerror=function(){g(void 0)},h.send(e)});if(200!==g.status)throw new Error(`Error. Received status ${g.status}`);return await g},this.updateUnreadMessages=async function(a){let e=new Promise(function(e,f){let g=new XMLHttpRequest;g.open("POST",`${c}/${b}/markAsReadNotifications`),g.setRequestHeader("Content-type","application/json; charset=UTF-8"),g.setRequestHeader("X-CSRF-TOKEN",d),g.onload=function(){200===g.status?e(g.response):f(g.status)},g.onerror=function(){console.log("Request error")},g.send(JSON.stringify({data:a}))});return await e}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
