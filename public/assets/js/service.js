const DataService = function () {
    function b(a) {
        return {
            id: a.id,
            name: a.name,
            order: a.order,
            lessons: 0 === a.lessons.length ? null : a.lessons,
            collapsed: !1
        }
    }

    let c = window.Laravel.lang, d = "", e = window.Laravel.csrfToken;
    this.getCourseData = async function (c) {
        let a = await this.getResource("GET", window.Laravel.lang+"/getCourseData/" + c, "", !1);
        return JSON.parse(a.response).map(b)
    }, this.addTopic = async function (c, a) {
        let b = await this.getResource("POST", "create-theme", "course_id=" + c + "&name=" + a + "", !1);
        return {id: parseInt(b.response), name: a}
    }, this.editTopic = async function (b, a, d) {
        let c = await this.getResource("POST", "edit-theme", "theme_id=" + a + "&theme_name=" + d + "", !1),
            e = JSON.parse(c.response);
        return {msgTitle: e.title, msgText: e.body}
    }, this.removeTopic = async function (b, a) {
        let c = await this.getResource("DELETE", "delete-theme", "theme_id=" + a + "&course_id=" + b + "", !0),
            d = JSON.parse(c.response);
        return {msgTitle: d.title, msgText: d.body}
    }, this.removeLesson = async function (b, a, c) {
        let d = await this.getResource("DELETE", "delete-lesson", "lesson_id=" + c + "&theme_id=" + a + "", !0),
            e = JSON.parse(d.response);
        return {msgTitle: e.title, msgText: e.body}
    }, this.swapTopicsOrders = async function (b, a, c) {
        this.getResource("POST", "move-theme", "theme_1_id=" + a + "&theme_2_id=" + c + "", !0)
    }, this.swapLessonsOrders = async function (c, a, b, d) {
        this.getResource("POST", "move-lesson", "lesson_1_id=" + b + "&lesson_2_id=" + d + "", !0)
    }, this.getResource = async function (a, b, c, f) {
        let g = await new Promise(function (g) {
            let h = new XMLHttpRequest;
            h.open(a, `${d}/${b}`, f), h.setRequestHeader("Content-type", "application/x-www-form-urlencoded"), h.setRequestHeader("X-CSRF-TOKEN", e), h.onload = function () {
                g(h)
            }, h.onerror = function () {
                g(void 0)
            }, h.send(c)
        });
        if (200 !== g.status) throw new Error(`Error. Received status ${g.status}`);
        return await g
    }, this.updateUnreadMessages = async function (a) {
        let b = new Promise(function (b, f) {
            let g = new XMLHttpRequest;
            g.open("POST", `${d}/${c}/markAsReadNotifications`), g.setRequestHeader("Content-type", "application/json; charset=UTF-8"), g.setRequestHeader("X-CSRF-TOKEN", e), g.onload = function () {
                200 === g.status ? b(g.response) : f(g.status)
            }, g.onerror = function () {
                console.log("Request error")
            }, g.send(JSON.stringify({data: a}))
        });
        return await b
    }
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
