const dataService = function () {
    function b(a) {
        return {
            id: a.id,
            name: a.name,
            order: a.order,
            lessons: 0 === a.lessons.length ? null : a.lessons,
            collapsed: !1
        }
    }

    let c = window.Laravel.lang, d = window.Laravel.csrfToken;
    this.getCourseData = async function (c) {
        let a = await this.getResource("GET", window.Laravel.lang+"/getCourseData/" + c, "", !1);
        return JSON.parse(a.response).map(b)
    }, this.addTopic = async function (c, a) {
        let b = await this.getResource("POST", "create-theme", "course_id=" + c + "&name=" + a + "", !1);
        return {id: parseInt(b.response), name: a}
    }, this.editTopic = async function (b, a, d) {
        let c = await this.getResource("POST", "edit-theme", "theme_id=" + a + "&theme_name=" + d + "", !1),
            e = JSON.parse(c.response);
        return {msgTitle: e.title, msgText: e.body}
    }, this.removeTopic = async function (b, a) {
        let c = await this.getResource("DELETE", "delete-theme", "theme_id=" + a + "&course_id=" + b + "", !0),
            d = JSON.parse(c.response);
        return {msgTitle: d.title, msgText: d.body}
    }, this.removeLesson = async function (b, a, c) {
        let d = await this.getResource("DELETE", "delete-lesson", "lesson_id=" + c + "&theme_id=" + a + "", !0),
            e = JSON.parse(d.response);
        return {msgTitle: e.title, msgText: e.body}
    }, this.swapTopicsOrders = async function (b, a, c) {
        this.getResource("POST", "move-theme", "theme_1_id=" + a + "&theme_2_id=" + c + "", !0)
    }, this.swapLessonsOrders = async function (c, a, b, d) {
        this.getResource("POST", "move-lesson", "lesson_1_id=" + b + "&lesson_2_id=" + d + "", !0)
    }, this.getResource = async function (a, b, c, e) {
        let f = await new Promise(function (f) {
            let g = new XMLHttpRequest;
            g.open(a, `${""}/${b}`, e), g.setRequestHeader("Content-type", "application/x-www-form-urlencoded"), g.setRequestHeader("X-CSRF-TOKEN", d), g.onload = function () {
                f(g)
            }, g.onerror = function () {
                f(void 0)
            }, g.send(c)
        });
        if (200 !== f.status) throw new Error(`Error. Received status ${f.status}`);
        return await f
    }
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
